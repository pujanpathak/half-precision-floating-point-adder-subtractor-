module EightBitRightBarrelShifter (in, ctrl, out);
	input [7:0] in;
	input [2:0] ctrl;
	output [7:0] out;
	logic [7:0] x, y;
	

	//4 bit shift right  
	mux2x1 inst_17 (.in0(in[7]), .in1(1'b0), .sel(ctrl[2]), .out(x[7]));
	mux2x1 inst_16 (.in0(in[6]), .in1(1'b0), .sel(ctrl[2]), .out(x[6]));
	mux2x1 inst_15 (.in0(in[5]), .in1(1'b0), .sel(ctrl[2]), .out(x[5]));
	mux2x1 inst_14 (.in0(in[4]), .in1(1'b0), .sel(ctrl[2]), .out(x[4]));
	mux2x1 inst_13 (.in0(in[3]), .in1(in[7]), .sel(ctrl[2]), .out(x[3]));
	mux2x1 inst_12 (.in0(in[2]), .in1(in[6]), .sel(ctrl[2]), .out(x[2]));
	mux2x1 inst_11 (.in0(in[1]), .in1(in[5]), .sel(ctrl[2]), .out(x[1]));
	mux2x1 inst_10 (.in0(in[0]), .in1(in[4]), .sel(ctrl[2]), .out(x[0]));
	
	//2 bit shift right 
	mux2x1 inst_27 (.in0(x[7]), .in1(1'b0), .sel(ctrl[1]), .out(y[7]));
	mux2x1 inst_26 (.in0(x[6]), .in1(1'b0), .sel(ctrl[1]), .out(y[6]));
	mux2x1 inst_25 (.in0(x[5]), .in1(x[7]), .sel(ctrl[1]), .out(y[5]));
	mux2x1 inst_24 (.in0(x[4]), .in1(x[6]), .sel(ctrl[1]), .out(y[4]));
	mux2x1 inst_23 (.in0(x[3]), .in1(x[5]), .sel(ctrl[1]), .out(y[3]));
	mux2x1 inst_22 (.in0(x[2]), .in1(x[4]), .sel(ctrl[1]), .out(y[2]));
	mux2x1 inst_21 (.in0(x[1]), .in1(x[3]), .sel(ctrl[1]), .out(y[1]));
	mux2x1 inst_20 (.in0(x[0]), .in1(x[2]), .sel(ctrl[1]), .out(y[0]));
	
	//1 bit shift right
	mux2x1 inst_07 (.in0(in[7]), .in1(1'b0), .sel(ctrl[2]), .out(x[7]));
	mux2x1 inst_06 (.in0(in[6]), .in1(1'b0), .sel(ctrl[2]), .out(x[6]));
	mux2x1 inst_05 (.in0(in[5]), .in1(1'b0), .sel(ctrl[2]), .out(x[5]));
	mux2x1 inst_04 (.in0(in[4]), .in1(1'b0), .sel(ctrl[2]), .out(x[4]));
	mux2x1 inst_03 (.in0(in[3]), .in1(in[7]), .sel(ctrl[2]), .out(x[3]));
	mux2x1 inst_02 (.in0(in[2]), .in1(in[6]), .sel(ctrl[2]), .out(x[2]));
	mux2x1 inst_01 (.in0(in[1]), .in1(in[5]), .sel(ctrl[2]), .out(x[1]));
	mux2x1 inst_00 (.in0(in[0]), .in1(in[4]), .sel(ctrl[2]), .out(x[0]));